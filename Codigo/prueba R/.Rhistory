setwd()
getwd()
library(shiny); runApp('Desktop/prueba-R/prueba6.R')
library(rgdal)
datos1 <- readOGR(dsn="data/", layer="Edificaciones")
getwd()
setwd("/Users/gema/Desktop/prueba-R/")
runApp('prueba6.R')
runApp('prueba6.R')
library(DT)
library(DT)
runApp('prueba6.R')
datos1 <- readOGR(dsn="data/", layer="Edificaciones")
plot(datos1)
datos2 <- readOGR(dsn="data/", layer="CurvaNivel")
plot(datos2)
datos3 <- readOGR(dsn="data/", layer="Toponimos")
library(sf)
filename <- system.file("data/Toponimos.shp", package="sf")
nc <- st_read(dsn="data/", layer="Toponimos")
nc <- read_sf(dsn="data/", layer="Toponimos")
plot(nc)
u <- st_union(nc)
plot(u)
mapview(u)
runApp('prueba6.R')
mapview(datos1
)
runApp('prueba6.R')
library(rgdal)
library(rgdal)
datos1 <- readOGR(dsn="data/", layer="Edificaciones")
mapview(datos)
mapview(datos1)
runApp('prueba6.R')
datos1 <- readOGR(dsn="data/", layer="CurvasNivel")
datos2 <- readOGR(dsn="data/", layer="CurvasNivel")
datos2 <- readOGR(dsn="data/", layer="CurvaNivel")
datos2$GID=
mapview(datos2)
datos2$GID=
mapview(datos2)
mapview(datos2)
ggplot(datos2, aes(GID)) +
layer(geom = "point", stat = "identity", position = "identity",
data = head, params = list(na.rm = FALSE)
)
library(ggplot2)
ggplot(datos2, aes(GID)) +
layer(geom = "point", stat = "identity", position = "identity",
data = head, params = list(na.rm = FALSE)
)
shape <-datos2 <- readOGR(dsn="data/", layer="CurvaNivel")
#data2 is my      created attributes that I'm attaching to blank file
shape1 <-shape[shape$GID == 459757,]
writeOGR(shape1, dsn = 'data/', layer ='newstuff', driver = 'ESRI Shapefile')
plot(shape1)
mapview(shape1)
# POLIGONOS - Ver si queremos cambiar su transformación con spTransform
datos1 <- readOGR(dsn="data/", layer="Edificaciones")
# LINEAS - Ver si queremos cambiar su transformación con spTransform
datos2 <-readOGR(dsn="data/", layer="CurvaNivel")
# MULTIPUNTOS - Ver si queremos cambiar su transformación con spTransform
datos3 <-readOGR(dsn="data/", layer="Toponimos")
library(sf)
filename <- system.file("data/Toponimos.shp", package="sf")
nc <- st_read(dsn="data/", layer="Toponimos")
nc <- read_sf(dsn="data/", layer="Toponimos")
plot(nc)
u <- st_union(nc)
plot(u)
# LINEAS - Ver si queremos cambiar su transformación con spTransform
datos4 <- readOGR(dsn="data/", layer="puntos")
plot(datos4)
mapview(datos4)
mapview(shape1)
mapview(shape1)
shape <- readOGR(dsn="data/", layer="CurvaNivel") # Leemos la capa
shape1 <-shape[shape$GID == 459757,] # Nos quedamos con el valor que nos interesa
writeOGR(shape1, dsn = 'data/', layer ='newstuff', driver = 'ESRI Shapefile') # Guardamos la capa
plot(shape1)
mapview(shape1)
mapview(datos1)
# POLIGONOS - Ver si queremos cambiar su transformación con spTransform
datos1 <- readOGR(dsn="data/", layer="Edificaciones")
mapview(datos1)
shape <- readOGR(dsn="data/", layer="Edificaciones") # Leemos la capa
shape1 <-shape[shape$GID == 1309187,] # Nos quedamos con el valor que nos interesa
writeOGR(shape1, dsn = 'data/', layer ='newstuff', driver = 'ESRI Shapefile') # Guardamos la capa
plot(shape1)
mapview(shape1)
mapview(datos4)
shape <- readOGR(dsn="data/", layer="puntos") # Leemos la capa
shape1 <-shape[shape$GID == 44187,] # Nos quedamos con el valor que nos interesa
writeOGR(shape1, dsn = 'data/', layer ='newstuff', driver = 'ESRI Shapefile') # Guardamos la capa
plot(shape1)
mapview(shape1)
# LINEAS - Ver si queremos cambiar su transformación con spTransform
datos2 <- readOGR(dsn="data/", layer="CurvaNivel")
shape <- readOGR(dsn="data/", layer="CurvaNivel") # Leemos la capa
shape1 <-shape[shape$GID == 122602,] # Nos quedamos con el valor que nos interesa
writeOGR(shape1, dsn = 'data/', layer ='newstuff', driver = 'ESRI Shapefile') # Guardamos la capa
plot(shape1)
mapview(shape1)
mapview(datos2)
shape <- readOGR(dsn="data/", layer="CurvaNivel") # Leemos la capa
shape1 <-shape[shape$GID == 469896,] # Nos quedamos con el valor que nos interesa
writeOGR(shape1, dsn = 'data/', layer ='newstuff', driver = 'ESRI Shapefile') # Guardamos la capa
plot(shape1)
mapview(shape1)
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
runApp('prueba6.R')
library(shiny)
library(leaflet)
library(rgdal)
library(mapview)
library(DT)
#r_colors <- rgb(t(col2rgb(colors()) / 255))
#names(r_colors) <- colors()
#shapeData1 <- readOGR(dsn="data/", layer="Edificaciones")
#shapeData1 <- spTransform(shapeData1, CRS("+proj=longlat +datum=WGS84"))
#shapeData2 <- readOGR(dsn="data/", layer="CurvaNivel")
data <- read.csv("data/edficaciones.csv")
datos1 <- readOGR(dsn="data/", layer="Edificaciones")
datos2 <- readOGR(dsn="data/", layer="CurvaNivel")
ui <- fluidPage(
titlePanel(p("Spatial app", style = "color:#3474A7")),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "variableselected",
label = "Select variable",
choices = c("ID_HOJA", "GID")
),
selectInput(
inputId = "yearselected",
label = "Select value",
choices = 459750:459759
),
actionButton("do", "Click Me")
# https://shiny.rstudio.com/articles/action-buttons.html
),
mainPanel(
mapviewOutput("map", width = "100%", height = 400)
)
)
# mapviewOutput("map", width = "100%", height = 400),
#p()
)
server <- function(input, output) {
output$table <- renderDT(data)
#output$value <- renderPrint({ input$num })
observeEvent(input$do, {
shape <- readOGR(dsn="data/", layer="CurvaNivel") # Leemos la capa
shape1 <-shape[shape$GID == input$yearselected,] # Nos quedamos con el valor que nos interesa - 469896 - 459757
output$map <- renderMapview({
mapview(datos1) + mapview(datos2) + mapview(shape1)
})
})
}
shinyApp(ui, server)
